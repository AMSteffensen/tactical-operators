name: Vercel Frontend Deployment

on:
  pull_request:
    branches: [ main ]
    paths: 
      - 'web-client/**'
      - 'shared/**'
      - 'vercel.json'
      - '.github/workflows/vercel-deployment.yml'
  push:
    branches: [ main ]
    paths:
      - 'web-client/**'
      - 'shared/**'
      - 'vercel.json'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd shared && npm ci
        cd ../web-client && npm ci

    - name: Build shared package
      run: |
        cd shared
        npm run build

    - name: Lint web client
      run: |
        cd web-client
        npm run lint

    - name: Type check web client
      run: |
        cd web-client
        npx tsc --noEmit

    - name: Test web client build
      run: |
        cd web-client
        npm run build
      env:
        VITE_API_URL: https://tactical-operators-production.up.railway.app
        VITE_SOCKET_URL: https://tactical-operators-production.up.railway.app
        VITE_ENVIRONMENT: staging

    - name: Test build artifacts
      run: |
        cd web-client
        ls -la dist/
        # Check if essential files exist
        test -f dist/index.html
        test -d dist/assets
        echo "‚úÖ Build artifacts verified"

  deploy-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Vercel CLI
      run: npm install -g vercel@latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies and build shared
      run: |
        npm ci
        cd shared && npm ci && npm run build

    - name: Deploy to Vercel Preview
      id: vercel-deploy
      run: |
        cd web-client
        vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --token=${{ secrets.VERCEL_TOKEN }}
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "Deployed to: $DEPLOYMENT_URL"

    - name: Test preview deployment
      run: |
        DEPLOYMENT_URL="${{ steps.vercel-deploy.outputs.deployment_url }}"
        echo "Testing deployment at: $DEPLOYMENT_URL"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Test if the site loads
        if curl -f "$DEPLOYMENT_URL" > /dev/null 2>&1; then
          echo "‚úÖ Preview deployment is accessible"
        else
          echo "‚ùå Preview deployment failed to load"
          exit 1
        fi

    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üåê Vercel Preview')
          );
          
          const deploymentUrl = '${{ steps.vercel-deploy.outputs.deployment_url }}';
          
          const body = `üåê **Vercel Preview Deployment**
          
          Your frontend changes have been deployed to Vercel preview:
          
          **üîó Preview URL**: ${deploymentUrl}
          
          **üß™ Test Features:**
          - Character creation and management
          - 3D tactical view rendering  
          - Socket.IO real-time communication
          - API integration with Railway backend
          
          **üìã Manual Testing Checklist:**
          - [ ] Page loads without errors
          - [ ] Character creation form works
          - [ ] 3D tactical view renders properly
          - [ ] API calls to Railway backend succeed
          - [ ] Socket.IO connection establishes
          - [ ] No console errors in browser dev tools
          
          This preview will be updated automatically with new commits to this PR.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Vercel CLI
      run: npm install -g vercel@latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies and build shared
      run: |
        npm ci
        cd shared && npm ci && npm run build

    - name: Deploy to Vercel Production
      run: |
        cd web-client
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Test production deployment
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Test production URL (you'll need to update this with your actual domain)
        PRODUCTION_URL="https://tactical-operator.vercel.app"
        
        if curl -f "$PRODUCTION_URL" > /dev/null 2>&1; then
          echo "‚úÖ Production deployment is accessible"
        else
          echo "‚ö†Ô∏è Production deployment test failed (may still be deploying)"
        fi

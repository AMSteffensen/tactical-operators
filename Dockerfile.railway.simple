# Simple Railway Dockerfile - Alternative approach if workspace fails
FROM node:20-alpine AS base

WORKDIR /app

# Copy root package.json for workspace info
COPY package.json package-lock.json ./

# Copy shared package
COPY shared/ ./shared/

# Copy api-server package  
COPY api-server/ ./api-server/

# Install all dependencies using npm workspaces
RUN npm ci

# Build shared package first
WORKDIR /app/shared
RUN npm run build

# Build API server
WORKDIR /app/api-server
RUN npm run build

# Production setup
FROM node:20-alpine AS production

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 api-server

# Copy built application
COPY --from=base --chown=api-server:nodejs /app/api-server/dist ./dist
COPY --from=base --chown=api-server:nodejs /app/api-server/package.json ./package.json
COPY --from=base --chown=api-server:nodejs /app/api-server/prisma ./prisma
COPY --from=base --chown=api-server:nodejs /app/shared/dist ./shared/dist
COPY --from=base --chown=api-server:nodejs /app/node_modules ./node_modules

# Generate Prisma client for production
RUN npx prisma generate

# Switch to non-root user
USER api-server

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Start application directly - NO PM2, NO npm
CMD ["node", "dist/app.js"]
